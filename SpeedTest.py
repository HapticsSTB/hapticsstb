
import pyximport; pyximport.install()
import Raw2FT as r2ft 
import time
import numpy as np

working_matrix = np.matrix([[ 0.165175269, 	6.193716635,	-0.05972626,	0.020033203, 	-0.136667224, 	-6.42215241	],
							[ 0.002429674, 	-3.63579423,	0.466390998, 	7.308900211, 	-0.18369186, 	-3.65179797	],
							[ -10.5385017,	0.802731009,	-10.1357248,	0.359714766,	-10.0934065,	0.442593679	],
							[ 0.144765089,	-0.032574325,	0.004132077,	0.038285567, 	-0.145061852,	-0.010347366],
							[ -0.089833077,	-0.024635731,	0.165602185,	-0.009131771,	-0.080132747,	0.039589968	],
							[ 0.001846317,	0.085776855,	0.005262967,	0.088317691, 	0.001450272,	0.087714269	]]) 

bias = np.matrix([[0.0],[0.0],[0.0],[0.0],[0.0],[0.0]])


wm_array = np.array([	[ 0.165175269, 	6.193716635,	-0.05972626,	0.020033203, 	-0.136667224, 	-6.42215241	],
						[ 0.002429674, 	-3.63579423,	0.466390998, 	7.308900211, 	-0.18369186, 	-3.65179797	],
						[ -10.5385017,	0.802731009,	-10.1357248,	0.359714766,	-10.0934065,	0.442593679	],
						[ 0.144765089,	-0.032574325,	0.004132077,	0.038285567, 	-0.145061852,	-0.010347366],
						[ -0.089833077,	-0.024635731,	0.165602185,	-0.009131771,	-0.080132747,	0.039589968	],
						[ 0.001846317,	0.085776855,	0.005262967,	0.088317691, 	0.001450272,	0.087714269	]], dtype='float64')

bias_array = np.zeros((6,1), dtype='float64')

def Raw2FT(x, FT_transform, bias):
	C = np.zeros((6,1), dtype = np.float64)
	#cdef np.ndarray[np.float64_t, ndim = 2] FT = np.zeros((6,1))

	for i in range(0,6):
		j = i*2
		y = (ord(x[j])<<8) + (ord(x[j+1]))
		if y > 2048:
			C[5-i] = (y - 4096)*0.0025
		else:
			C[5-i] = y*0.0025

	return np.dot(FT_transform, (C - bias))

x = '\x10'*12

n = 20000
start = time.perf_counter()

for i in range(0,n):
	y = Raw2FT(x, wm_array, bias_array)

print("Python", (time.perf_counter() - start)/n)
print(y)


start = time.perf_counter()

for i in range(0,n):
	z = r2ft.Raw2FT(x, wm_array, bias_array)

print("Cython", (time.perf_counter() - start)/n)
print(z) 